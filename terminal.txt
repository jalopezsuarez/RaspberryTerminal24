terminal
==========================================================

Raspberry Pi barebone is based on ARM architecture. Complete build thinclient terminal with using Raspberry Debian OS.

Raspberry Pi OS Lite
Debian version: 12 (bookworm)
System: 64-bit
Kernel version: 6.1
Release: December 5th 2023

Raspberry Pi OS (64-bit)
Compatible: 3B, 3B+, 3A+, 4B, 400, 5, CM3, CM3+, CM4, CM4S, Zero 2 W

Rasbperry first login User/Password
==========================================================

El acceso por defecto se realiza con el usuario pi y los siguientes credenciales.

User: pi
Password: [PASS]

Raspi-Config
==========================================================

Mediante la utilidad de configuracion se acceden a las opciones avanzadas de concifugracion de la placa (barebone) y sistema (linux / debian). Ensures that all of the SD card storage is available to the OS. File system was expanded automatically during installation.

sudo raspi-config
raspi-config :: 3 Interface Options :: I1 SSH
raspi-config :: 6 Advanced Options :: A1 Expand filesystem

Update System
==========================================================

Una vez instalado el sistema Debian Lite lo primero que hay que hacer es actualizar el repositorio de programas.

sudo apt-get update

Vim Editor (Fix Arrowkeys)
==========================================================

En el editor del box de consola se puede corregir algunas teclas especiales como cursores y borrar con el siguiente comando:

echo "set nocompatible" > ~/.vimrc
echo "set backspace=indent,eol,start" >> ~/.vimrc

sudo su
echo "set nocompatible" > ~/.vimrc
echo "set backspace=indent,eol,start" >> ~/.vimrc

Hostname
==========================================================

Change default hostname from raspberrypi to terminal to identify on network.

sudo vi /etc/hostname
terminal

sudo vi /etc/hosts
127.0.1.1 terminal

X-Window Minimal System
==========================================================

sudo apt-get install -y --no-install-recommends xinit xserver-xorg

Openbox Window Manager
==========================================================

Este gestor de ventanas para XWindow es minimalista y ocupa solo 7MB de memoria, optimizado para dispositivos de baja capacidad como RaspberryPi. Una vez instalado el OpenBox se puede aplicar el tema win10mod.obt con la estética de Windows 10 para las ventanas.

sudo apt-get install -y openbox

Para iniciar XWindow una vez instalado Openbox manualmente utilizar el siguiente comando:

startx

VNC Server
==========================================================

I got it working using x11vnc rather than tightvncserver or vncserver

sudo apt-get install -y xfonts-75dpi xfonts-100dpi

Install x11vnc

sudo apt-get -y install x11vnc

Create a password for your user:

x11vnc -storepasswd

Start the X and then start x11vnc:

starts &
x11vnc -usepw -repeat -shared -forever &

XTerminal System
==========================================================

Installation de la consola box en modo grafico Xterm:

sudo apt-get install -y xterm

Una vez instalada podemos mejorar la consola ajustando colores y fuente de letra desde el siguiente archivo.

/home/pi/.Xdefaults

IMPORTANTE!! DEJAR un espacio al principio y al final del archivo!

XTerm*background: black
XTerm*foreground: WhiteSmoke
XTerm*faceSize: 11
XTerm*faceName: DejaVu Sans Mono
XTerm*renderFont: true

Tint2 TaskBar
==========================================================

Tint2 nos facilita una barra de tareas donde se mostraran las ventanas abiertas del sistema de ventanas.

sudo apt-get install -y tint2

Mediante Tint2 podemos configurar diferentes iconos para lanzar aplicaciones, con el archivo /home/pi/.config/tint2/tint2rc.

#---------------------------------------------
# TINT2 CONFIG FILE BYLEODELACRUZ
#---------------------------------------------
#
#---------------------------------------------
# BACKGROUND AND BORDER
#---------------------------------------------

rounded = 0
border_width = 0
background_color = #000000 100
border_color = #ffffff 0

rounded = 0
border_width = 0
background_color = #5c90b8 20
border_color = #ffffff 50

rounded = 0
border_width = 0
background_color = #8e857c 30
border_color = #FFFFFF 50

rounded = 0
border_width = 0
background_color = #8e857c 30
border_color = #ffffff 50

#---------------------------------------------
# PANEL
#---------------------------------------------
panel_monitor = all
panel_items = TLC
panel_position = bottom center
panel_size = 100% 24k
panel_margin = 0 0
panel_padding = 0 0
font_shadow = 0
panel_background_id = 1
wm_menu = 0
panel_dock = 0
panel_layer = bottom

#---------------------------------------------
# TASKBAR
#---------------------------------------------
#taskbar_mode = multi_desktop
taskbar_mode = single_desktop
taskbar_padding = 1 1 2
taskbar_background_id = 0
#taskbar_active_background_id = 0

#---------------------------------------------
# TASKS
#---------------------------------------------
task_icon = 0
task_text = 1
task_maximum_size = 350 24
task_centered = 1
task_padding = 30 0
task_font = Sans 9
task_font_color = #ffffff 60
task_background_id = 3
task_icon_asb = 100 0 0
# replace STATUS by 'urgent', 'active' or 'iconfied'
#task_STATUS_background_id = 2
#task_STATUS_font_color = #ffffff 85
#task_STATUS_icon_asb = 100 0 0
# example:
task_active_background_id = 4
task_active_font_color = #ffffff 60
#task_active_font_color = #ffffff 60
#task_active_font_color = #ca6e59 60
task_active_icon_asb = 100 0 0
urgent_nb_of_blink = 8

#---------------------------------------------
# MOUSE ACTION ON TASK
#---------------------------------------------
mouse_middle = none
mouse_right = none
mouse_scroll_up = none
mouse_scroll_down = none

#---------------------------------------------
# CLOCK
#---------------------------------------------
time1_format = %a %H:%M
time1_font = DejaVu Sans Bold 9
clock_font_color = #ffffff 76
clock_padding = 6 0 3
clock_background_id = 0

#---------------------------------------------
# LAUNCHER
#---------------------------------------------
launcher_padding = 0 0 3
launcher_background_id = 1
launcher_icon_size = 24
launcher_item_app = /home/pi/.config/tint2/control.desktop
launcher_item_app = /home/pi/.config/tint2/poweroff.desktop
launcher_icon_theme =

# End of config

Una vez configurado el archivo principal se crean los enlaces ayudándonos de los archivos tipo /home/pi/.config/tint2/*.desktop

control.desktop

[Desktop Entry]
Name=Panel de Control
Comment=Panel de Control
Exec=/home/pi/terms/bin/control.sh
Icon=/home/pi/terms/share/tint2/control.png
Type=Application

poweroff.desktop

[Desktop Entry]
Name=Apagar
Comment=Apagar
Exec=/home/pi/terms/bin/poweroff.sh
Icon=/home/pi/terms/share/tint2/poweroff.png
Type=Application

Debian Essentials Dependences
==========================================================

All dependences needed to build sucessufuly the applications from source.

sudo apt-get install -y build-essential
sudo apt-get install -y make automake cmake git subversion checkinstall unzip libtool

iDesktop
==========================================================

iDesktop desde el sitio web oficial

https://sourceforge.net/projects/idesk/ (0.7.5)
https://github.com/neagix/idesk (latest version 0.7.8)

COMPILACION LATEST-VERSION
----------------------------------------------------------

La opción de compilación permite solucionar algunos problemas que vienen en la version que se encuentra en el repositorio oficial de Debian. Compilation e installation en el directorio /usr/share/idesk.

sudo apt-get install -y libx11-dev libimlib2-dev libxft-dev

wget https://github.com/neagix/idesk/archive/refs/tags/v0.7.8.tar.gz

** OFICIAL
autoreconf --install
./configure
make -j
sudo make install

CONFIGURACION
----------------------------------------------------------

El gestor de escritorio iDesktop permite crear iconos y establecer fondo de escritorio.

mkdir ~/.idesktop
cp /usr/local/share/idesk/dot.ideskrc ~/.ideskrc

EN CASO DE SER NECESARIO DEPENDENCIA - (imlib2-config) IMLIB2**
----------------------------------------------------------

Download version 1.4.2. because is necesary for imlib2-config.

wget https://github.com/kkoudev/imlib2/archive/refs/tags/v1.4.2.tar.gz

sudo cp /usr/include/freetype2/ft2build.h /usr/include/ft2build.h
sudo ln -s /usr/include/freetype2/freetype /usr/include/freetype

./autogen.sh
make -j
sudo make install
sudo cp imlib2-config /usr/bin

CONKY
==========================================================

Comnpile version 1.9.0 conky

sudo apt-get install -y libncurses5-dev lua5.1 liblua5.1-0-dev libiw-dev libxdamage-dev

https://sourceforge.net/projects/conky/files/conky/1.9.0/

FIX SOURCE - CONKY
----------------------------------------------------------

src/conky.c
/* no buffers in used memory? */
extern int no_buffers;
enum ifup_strictness_enum ifup_strictness;

src/conky.h
/* if_up strictness selector 
 * needed by conky.c and linux.c (and potentially others) */
extern enum ifup_strictness_enum {
    IFUP_UP,
    IFUP_LINK,
    IFUP_ADDR
} ifup_strictness;

COMPILE - CONKY
----------------------------------------------------------

./autogen.sh
./configure --build=arm --enable-wlan
make -j
sudo make install

sudo setcap cap_net_raw,cap_net_admin=eip /usr/local/bin/conky

SETUP - CONKY
----------------------------------------------------------

Crear archivo ~/.conkyrc e insertar el contenido de configuración:

background yes
alignment top_left

out_to_console no
out_to_stderr no

own_window yes
own_window_type desktop
own_window_transparent no
own_window_hints undecorated,above,sticky,skip_taskbar,skip_pager
own_window_colour black

use_spacer none
pad_percents 0

gap_x 0
gap_y 0

border_width 0
border_margin 0
draw_borders no
stippled_borders 0
border_inner_margin 0
border_outer_margin 0

default_color e9e9e9
default_outline_color white
default_shade_color white

draw_shades no
draw_outline no
draw_borders no
draw_graph_borders no

update_interval 1.0
cpu_avg_samples 2
net_avg_samples 2

double_buffer yes
no_buffers yes

minimum_size 5125 16
maximum_width 5125

use_xft yes
xftfont DejaVu Sans:size=10:weight=bold
uppercase no
extra_newline no

TEXT 
 ${nodename}  ${uptime}  ${execi 30 cat /sys/class/thermal/thermal_zone0/temp | awk '{print substr($0,0,3)}'}C${if_existing /sys/class/net/ppp0/operstate}  VPN${endif}${if_existing /sys/class/net/eth0/operstate up}  Ethernet ${addr eth0}${endif}${if_existing /sys/class/net/wlan0/operstate up}  Wi-Fi ${addr wlan0} ${wireless_essid wlan0} ${wireless_link_qual_perc wlan0}%${endif}  ${if_existing /sys/class/net/eth0/operstate up}eth0 ${downspeed eth0}(${totaldown eth0} descarga) / ${upspeed eth0}(${totalup eth0} subida) ${endif}${if_existing /sys/class/net/wlan0/operstate up}wlan0 ${downspeed wlan0}(${totaldown wlan0} descarga) / ${upspeed wlan0}(${totalup wlan0} subida) ${endif}

OPENBOX - SETUP
==========================================================

Para minimizar la interaction con el usuario se eliminan las opciones de menu nativas de OpenBox. Removed instances ShowMenu (Middle/Right) on Root. Editar el archivo /home/pi/.config/openbox/rc.xml para eliminar la posibilidad de acceder al menu del sistema de ventanas de escritorio y minimizar la interacción del usuario.
Se introduce una combinación de teclas para cambiar de aplicación rápidamente. NEXT window y PREV window con teclas desde el teclado en ole window CTRL+FLECHA. Se deshabilitara la combinación de teclas de ALT+TAB.

cp /home/pi/.config/openbox/rc.xml /home/pi/.config/openbox/rc.xml.bak

vi /home/pi/.config/openbox/rc.xml

Sustituir seccion teclas rapidas teclado:

  <keyboard>
    <!-- terminal -->
    <keybind key="C-A-Delete">
      <action name="Execute">
        <command>/home/pi/terms/bin/control.sh</command>
      </action>
    </keybind>
    <keybind key="C-Right">
      <action name="NextWindow"/>
    </keybind>
    <keybind key="C-Up">
      <action name="NextWindow"/>
    </keybind>
    <keybind key="C-Left">
      <action name="PreviousWindow"/>
    </keybind>
    <keybind key="C-Down">
      <action name="PreviousWindow"/>
    </keybind>
  </keyboard>

Sustituir seccion menu emergente:

  <context name="Root">
    <!-- terminal -->
  </context>

OPENBOX - AUTOSTART
==========================================================

Configuration de OpenBox permite mediante un archivo ejecutar automáticamente scripts y programas para preparar el entorno gráfico antes de inicializarlo.
El archivo /home/pi/.config/openbox/autostart.sh contiene todos los comandos que se ejecutaran automáticamente al iniciar sesión una vez OpenBox se haya inicializado.

# Openbox autostart.sh
# Programs that will run after Openbox has started

# VNC Server
x11vnc -usepw -repeat -shared -forever &

# Windows Envoronment
#(python /home/pi/terms/bin/remmina.py && idesk) &
idesk &
tint2 &
conky -q &

# Keyboard Touch
if [ -f /home/pi/terms/var/keyboard.enabled ] ; then
   (/usr/bin/florence) &
fi

# Monopuesto Service
if [ -f /home/pi/terms/var/monopuesto.enabled ] ; then
   (sudo systemctl start monopuesto.service) &
fi

# Autorun Service
if [ -f /home/pi/terms/var/autorun.enabled ] ; then
   (sleep 8s && sudo systemctl start autorun.service) &
fi  

REMMINA - FREERDP2 (STABLE VERSION)
==========================================================

sudo apt-get install -y libssl-dev libavcodec-dev libavutil-dev libswresample-dev libpkcs11-helper1-dev libkrb5-dev heimdal-dev libicu-dev libswscale-dev libpulse-dev libcups2-dev libfuse3-dev docbook-xsl xsltproc libusb-1.0-0-dev

sudo mkdir /opt/remmina

mkdir /home/pi/repos/freerdp_build
wget https://github.com/FreeRDP/FreeRDP/files/12670558/freerdp-2.11.2.tar.gz

cd /home/pi/repos/freerdp_build/freerdp
sudo rm -rf CMakeCache.txt CMakeFiles

cd /home/pi/repos/freerdp_build
cmake -DCMAKE_BUILD_TYPE=Release -DTARGET_ARCH=ARM64 -DARM_FP_ABI=hard -DWITH_NEON=OFF -DWITH_CUPS=ON -DWITH_WAYLAND=OFF -DWITH_PULSE=ON -DCmake -j_INSTALL_PREFIX:PATH=/opt/remmina/freerdp freerdp

make -j
sudo make install

sudo ln -s /opt/remmina/freerdp/bin/xfreerdp /usr/local/bin/
echo /opt/remmina/freerdp/lib | sudo tee /etc/ld.so.conf.d/freerdp_devel.conf > /dev/null
sudo ldconfig

REMMINA - MANAGER
==========================================================

//sudo apt-get install -y libatk1.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev libgtk-3-dev libharfbuzz-dev libgcrypt20-dev libsodium-dev libssh-dev libvte-2.91-dev libjson-glib-dev libkf5wallet-dev python3-dev libsecret-1-dev gettext libavahi-client-dev
* COMPILAR PARA MINIMIZAR DEPENDENCIAS DE 1 EN UNA Y COMPROBAR

mkdir /home/pi/repos/remmina_build
wget https://gitlab.com/Remmina/Remmina/-/archive/v.1.4.33/Remmina-v.1.4.33.tar.gz
tar zxvf Remmina-v.1.4.33.tar.gz
mv Remmina-v.1.4.33 remmina

cd /home/pi/repos/remmina_build/remmina
sudo rm -rf CMakeCache.txt CMakeFiles

cmake -DCMAKE_BUILD_TYPE=Release -DHAVE_LIBAPPINDICATOR=OFF -DWITH_PYTHONLIBS=ON -DWITH_X2GO=OFF -DWITH_FREERDP3=OFF -DWITH_WEBKIT2GTK=OFF -DWITH_KF5WALLET=ON -DWITH_NEWS=OFF -DWITH_GVNC=OFF -DWITH_LIBVNCSERVER=OFF -DWITH_SPICE=OFF -DCMAKE_INSTALL_PREFIX:PATH=/opt/remmina/remmina -DCMAKE_PREFIX_PATH=/opt/remmina/freerdp remmina

make -j
sudo make install

sudo ln -s /opt/remmina/remmina/bin/remmina /usr/local/bin/

REMOVE TOOLBAR BUTTONS
----------------------------------------------------------

rcw.c -> /* Duplicate session */ (COMENTAR CODIGO)

JAVA & MAVEN
==========================================================

JAVA
----------------------------------------------------------

sudo mkdir /usr/lib/jvm
sudo cp jdk-8u202-linux-arm64-vfp-hflt.tar.gz /usr/lib/jvm

/usr/lib/jvm/jdk1.8.0_202/bin

sudo vi /etc/profile

# Tell shell where to find java on system profile settings available to all users
export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_202
export PATH=$PATH:$JAVA_HOME/bin

MAVEN
----------------------------------------------------------

TOOLS
==========================================================

sudo apt-get install -y wpagui

sudo apt-get install -y geany

==========================================================
TODO!!!!!!!!!!!!!!!!
==========================================================

SERVICIO EN JAVA - TODO LO QUE HAY EN PYTHON EN VERSION ANTERIOR 
==========================================================

- quitar teclado en pantalla (no tiene sentido)
* cambiar por API-TOKEN para el servicio de control

- monopuesto.jar (monopuesto.py)

- service.jar (remmina.py)*
* montar el remmina.py dentro del service.jar
* montar un servicio de escucha para una ip:puerto ->
* devovler informacion raspberry terminal.
* poder reiniciar la raspberry remotamente (con una apikey).

192.168.0.195:8989/service/status?token=432423423fdsf3223432432423ederweer
-> devuelve json con info de la raspberry
192.168.0.195:8989/service/reboot?token=432423423fdsf3223432432423ederweer
-> reinicia la raspberry


Change System Locale
==========================================================

Corregir el System Locale del sistema que suele dar problemas si no se establece correctamente.

Realizar el cambio en el siguiente archivo,

vi ~/.bashrc
Escribir la siguiente linea de comando al final del archivo:

export LANGUAGE="es_ES.UTF-8"
export LC_ALL="es_ES.UTF-8"
export LC_CTYPE="es_ES.UTF-8"
export LC_LANG="es_ES.UTF-8"
export LANG="es_ES.UTF-8"
Seleccionar es_ES.UTF-8 como idioma por defecto del sistema:

sudo dpkg-reconfigure locales
sudo dpkg-reconfigure tzdata

Update Libraries System References
==========================================================
After install all dependences libraries its recommended purge system:

sudo apt-get -y autoremove --purge
sudo apt-get autoclean
sudo apt-get autoremove
sudo apt-get clean
sudo ldconfig
